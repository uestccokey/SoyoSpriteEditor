/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpriteEditorFrame.java
 *
 * Created on 2011-11-5, 19:51:42
 */
package com.soyostar.editor.sprite.main;

import com.soyostar.editor.dialog.NewProjectDialog;
import com.soyostar.editor.info.SoftInformation;
import com.soyostar.editor.util.Log;
import com.soyostar.editor.util.UIUtil;
import com.soyostar.editor.project.Project;
import com.soyostar.editor.project.ProjectManager;
import com.soyostar.editor.sprite.io.DefaultAnimationXMLReader;
import com.soyostar.editor.sprite.io.DefaultAnimationXMLWriter;
import com.soyostar.editor.sprite.io.IAnimationReader;
import com.soyostar.editor.sprite.io.IAnimationWriter;
import com.soyostar.editor.sprite.model.Animation;
import com.soyostar.editor.sprite.model.Picture;
import java.awt.Font;
import java.awt.Insets;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author Administrator
 */
public class SpriteEditorFrame extends javax.swing.JFrame {

    /** Creates new form SpriteEditorFrame */
    public SpriteEditorFrame() {
        initComponents();
        //获取屏幕的边界
        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(this.getGraphicsConfiguration());
        //获取底部任务栏高度
        int taskBarHeight = screenInsets.bottom;
        double width = Toolkit.getDefaultToolkit().getScreenSize().width; //得到当前屏幕分辨率的高
        double height = Toolkit.getDefaultToolkit().getScreenSize().height;//得到当前屏幕分辨率的宽
        this.setSize((int) width, (int) height - taskBarHeight);//设置大小
//        data.setMainFrame(this);
        setTitle(SoftInformation.chineseName + " "
                + SoftInformation.majorVersion + "."
                + SoftInformation.minorVersion + "."
                + SoftInformation.modifiedVersion);
    }
    private AppData data = AppData.getInstance();
    private SpriteEditorPanel sep = null;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProjectMenuItem = new javax.swing.JMenuItem();
        openProjectMenuItem = new javax.swing.JMenuItem();
        closeProjectMenuItem = new javax.swing.JMenuItem();
        saveProjectMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SpriteEditorFrame.class);
        setTitle(resourceMap.getString("title")); // NOI18N

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        fileMenu.setMnemonic('F');
        fileMenu.setText("文件(F)");
        fileMenu.setName("fileMenu"); // NOI18N

        newProjectMenuItem.setText("新建项目");
        newProjectMenuItem.setName("newProjectMenuItem"); // NOI18N
        newProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newProjectMenuItem);

        openProjectMenuItem.setText("打开项目");
        openProjectMenuItem.setName("openProjectMenuItem"); // NOI18N
        openProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openProjectMenuItem);

        closeProjectMenuItem.setText("关闭项目");
        closeProjectMenuItem.setName("closeProjectMenuItem"); // NOI18N
        closeProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeProjectMenuItem);

        saveProjectMenuItem.setText("保存项目");
        saveProjectMenuItem.setName("saveProjectMenuItem"); // NOI18N
        saveProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveProjectMenuItem);

        exitMenuItem.setText("退出");
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuItemActionPerformed
        // TODO add your handling code here:
        newProject();
    }//GEN-LAST:event_newProjectMenuItemActionPerformed

    private void openProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed
        // TODO add your handling code here:
        openProject();
    }//GEN-LAST:event_openProjectMenuItemActionPerformed

    private void saveProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenuItemActionPerformed
        // TODO add your handling code here:
        if (AppData.getInstance().getCurProject() == null) {
            return;
        }
        try {
            // TODO add your handling code here:
            saveProject();
            JOptionPane.showMessageDialog(this,
                    "项目保存成功！");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "警告",
                    "项目保存失败！", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_saveProjectMenuItemActionPerformed

    private void closeProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeProjectMenuItemActionPerformed
        // TODO add your handling code here:
        closeProject();
    }//GEN-LAST:event_closeProjectMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(1);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    public void openProject() {
        JFileChooser jf = new JFileChooser(new File("."));
        jf.setFileFilter(new Project.Filter());
        jf.showOpenDialog(this);
        File file = jf.getSelectedFile();
        try {
            if (file != null) {
                open(file.getParent());
            }
        } catch (Exception e) {
            e.printStackTrace();
            Log.getLogger(this.getClass()).error("openProject: " + file.getPath(), e);
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage(),
                    "项目导入失败！", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void open(String path) throws Exception {
        if (AppData.getInstance().getCurProject() != null) {
            closeProject();
        }
        Project project = new Project();
        AppData.getInstance().setCurProject(project);
        project.setPath(path);
        sep = new SpriteEditorPanel();
        getContentPane().add(sep);
        setVisible(true);
        if (ProjectManager.get()) {
            this.setTitle(SoftInformation.chineseName + " - " + project.getName());
            System.out.println("load animation start...");
            File aniDir = new File(project.getPath() + "\\data\\animation");
            File[] anis = aniDir.listFiles();
            for (int i = 0; i < anis.length; i++) {
                //用正则匹配map0.gat类似的地图文件
                Matcher m = Pattern.compile("animation[0-9]+\\.xml").matcher(anis[i].getName());
                if (m.find()) {
                    System.out.println("Reading animation: " + anis[i].getName());
                    IAnimationReader mapReader = new DefaultAnimationXMLReader();
                    Animation ani = mapReader.readAnimation(anis[i].getPath());
                    project.addAnimation(ani);
                    ArrayList<Picture> pictures = ani.getPictures();
                    for (int j = 0; j < pictures.size(); j++) {
                        boolean has = false;
                        for (int k = 0, n = project.getPictures().size(); k < n; k++) {
                            if (project.getPicture(k).getGid() == pictures.get(j).getGid()) {
                                has = true;
                                break;
                            }
                        }
                        if (!has) {
                            project.addPicture(pictures.get(j));
                        }
                    }
                }
            }
            System.out.println("load animation finish!");
            System.out.println("animation size is :" + project.getAnimationCounts());
            JOptionPane.showMessageDialog(this,
                    "项目导入成功！");
        } else {
            JOptionPane.showMessageDialog(this, "警告",
                    "项目导入失败！", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void saveProject() throws Exception {
        Iterator it = AppData.getInstance().getCurProject().getAnimations().keySet().iterator();
        while (it.hasNext()) {
            Integer key = (Integer) it.next();
            Animation ani = AppData.getInstance().getCurProject().getAnimations().get(key);
            if (ani != null) {
                IAnimationWriter mapWriter = new DefaultAnimationXMLWriter();
                mapWriter.writeAnimation(ani, AppData.getInstance().getCurProject().getPath() + File.separatorChar
                        + "data" + File.separatorChar + "animation" + File.separatorChar + "animation" + ani.getIndex() + ".xml");
            }
        }
    }

    public void closeProject() {
        if (AppData.getInstance().getCurProject() == null) {
            return;
        }
        setTitle(SoftInformation.chineseName + " "
                + SoftInformation.majorVersion + "."
                + SoftInformation.minorVersion + "."
                + SoftInformation.modifiedVersion);
        data.getCurProject().setPath("");
        data.getCurProject().setName("");
        data.getCurProject().removeAllAnimation();
        data.setCurProject(null);
        if (sep != null) {
            getContentPane().remove(sep);
            setVisible(true);
            sep = null;
        }
        System.gc();
    }

    private void newProject() {
        NewProjectDialog npd = new NewProjectDialog(this, true);
        npd.setVisible(true);
        Project project = npd.getNewProject();
        if (project != null) {
            if (AppData.getInstance().getCurProject() != null) {
                closeProject();
            }
            AppData.getInstance().setCurProject(project);
            if (ProjectManager.create()) {
                setTitle(SoftInformation.chineseName + " - " + project.getName());
            } else {
                JOptionPane.showMessageDialog(this, "项目文件生成异常，请检查路径！", "警告", JOptionPane.WARNING_MESSAGE);//弹出提示
            }
            sep = new SpriteEditorPanel();
            getContentPane().add(sep);
            setVisible(true);
        }
    }

    private void setLAF(String s) {
        try {
            UIManager.setLookAndFeel(s);
            SwingUtilities.updateComponentTreeUI(this);//更新控件的外观
        } catch (Exception e) {
            Log.getLogger(this.getClass()).error("setLAF: " + s, e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        JDialog.setDefaultLookAndFeelDecorated(true);
        JFrame.setDefaultLookAndFeelDecorated(true);
        UIUtil.InitGlobalFont(new Font("微软雅黑", Font.PLAIN, 13));//全局字体设置
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                SpriteEditorFrame thisClass = new SpriteEditorFrame();
                thisClass.setVisible(true);
                thisClass.setLAF(substance);
            }
        });
    }
    private static String substance = "org.pushingpixels.substance.api.skin.SubstanceMarinerLookAndFeel";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeProjectMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newProjectMenuItem;
    private javax.swing.JMenuItem openProjectMenuItem;
    private javax.swing.JMenuItem saveProjectMenuItem;
    // End of variables declaration//GEN-END:variables
}
