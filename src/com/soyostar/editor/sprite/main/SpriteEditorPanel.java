/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpriteEditorPanel.java
 *
 * Created on 2011-11-5, 19:35:31
 */
package com.soyostar.editor.sprite.main;

import com.soyostar.editor.sprite.listener.ProjectChangeListener;
import com.soyostar.editor.sprite.listener.ProjectChangedEvent;
import com.soyostar.editor.sprite.model.Animation;
import com.soyostar.editor.sprite.model.AnimationTableModel;
import com.soyostar.editor.sprite.model.Clip;
import com.soyostar.editor.sprite.model.Frame;
import com.soyostar.editor.sprite.model.FrameTableModel;
import com.soyostar.editor.sprite.model.Picture;
import com.soyostar.editor.sprite.ui.widget.ChoosePicturePane;
import com.soyostar.editor.sprite.ui.widget.HandleFramePane;
import com.soyostar.editor.sprite.ui.widget.HandlePicturePane;
import com.soyostar.editor.sprite.ui.widget.JFileChooserImagePreview;
import com.soyostar.editor.sprite.ui.widget.JSnapTipTabbedPane;
import com.soyostar.editor.sprite.ui.widget.ShowPicturePane;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragSource;
import java.awt.dnd.DropTarget;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

/**
 *
 * @author Administrator
 */
public class SpriteEditorPanel extends javax.swing.JPanel implements ProjectChangeListener {

    /** Creates new form SpriteEditorPanel */
    public SpriteEditorPanel() {
        AppData.getInstance().getCurProject().addProjectChangeListener(this);
        initComponents();
    }
    private HashMap<Picture, HandlePicturePane> handlePicturePanes = new HashMap<Picture, HandlePicturePane>();
    private HashMap<Picture, JScrollPane> showPictureScrollPanes = new HashMap<Picture, JScrollPane>();
    private AppData data = AppData.getInstance();
    private AnimationTableModel atm;
    private FrameTableModel ftm;
    private ChoosePicturePane picturePane;

    /**
     *
     * @return
     */
    public HashMap<Picture, HandlePicturePane> getHandlePicturePanes() {
        return handlePicturePanes;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spriteTabbedPane = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel8 = new javax.swing.JPanel();
        jToolBar6 = new javax.swing.JToolBar();
        zoomInPictureButton = new javax.swing.JButton();
        zoomOutPictureButton = new javax.swing.JButton();
        normalPictureButton = new javax.swing.JButton();
        handlePictureScrollPane = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        addPictureButton = new javax.swing.JButton();
        removePictureButton = new javax.swing.JButton();
        savePictureButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jSplitPane6 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        newAniButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        removeAniButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        aniTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jToolBar4 = new javax.swing.JToolBar();
        addFrameButton = new javax.swing.JButton();
        removeFrameButton = new javax.swing.JButton();
        copyFrameButton = new javax.swing.JButton();
        upFrameButton = new javax.swing.JButton();
        downFrameButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        frameTable = new javax.swing.JTable();
        jSplitPane7 = new javax.swing.JSplitPane();
        jPanel9 = new javax.swing.JPanel();
        handleFrameScrollPane = new javax.swing.JScrollPane();
        handleFramePane = new com.soyostar.editor.sprite.ui.widget.HandleFramePane();
        jToolBar3 = new javax.swing.JToolBar();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        leftRoate90Button = new javax.swing.JButton();
        rightRoate90Button = new javax.swing.JButton();
        flipVerticalButton = new javax.swing.JButton();
        flipHorizontalButton = new javax.swing.JButton();
        jToolBar5 = new javax.swing.JToolBar();
        jButton13 = new javax.swing.JButton();
        playAnimationButton = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        removeTileButton = new javax.swing.JButton();
        upAlignButton = new javax.swing.JButton();
        downAlignButton = new javax.swing.JButton();
        leftAlignButton = new javax.swing.JButton();
        rightAlignButton = new javax.swing.JButton();
        centerAlignButton = new javax.swing.JButton();
        outsideBoxCheckBox = new javax.swing.JCheckBox();
        loopCheckBox = new javax.swing.JCheckBox();
        zoomInFrameButton = new javax.swing.JButton();
        zoomOutFrameButton = new javax.swing.JButton();
        normalFrameButton = new javax.swing.JButton();
        jToolBar7 = new javax.swing.JToolBar();
        jSlider1 = new javax.swing.JSlider();
        alphaSlider = new javax.swing.JSlider();
        jScrollPane2 = new javax.swing.JScrollPane();
        pictureTabbedPane = new JSnapTipTabbedPane();

        spriteTabbedPane.setName("spriteTabbedPane"); // NOI18N
        spriteTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spriteTabbedPaneStateChanged(evt);
            }
        });

        jPanel7.setName("jPanel7"); // NOI18N

        jSplitPane5.setResizeWeight(1.0);
        jSplitPane5.setName("jSplitPane5"); // NOI18N
        jSplitPane5.setOneTouchExpandable(true);

        jPanel8.setName("jPanel8"); // NOI18N

        jToolBar6.setFloatable(false);
        jToolBar6.setRollover(true);
        jToolBar6.setName("jToolBar6"); // NOI18N

        zoomInPictureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/15.PNG"))); // NOI18N
        zoomInPictureButton.setFocusable(false);
        zoomInPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInPictureButton.setName("zoomInPictureButton"); // NOI18N
        zoomInPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInPictureButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(zoomInPictureButton);

        zoomOutPictureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/14.PNG"))); // NOI18N
        zoomOutPictureButton.setFocusable(false);
        zoomOutPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutPictureButton.setName("zoomOutPictureButton"); // NOI18N
        zoomOutPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutPictureButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(zoomOutPictureButton);

        normalPictureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/10.PNG"))); // NOI18N
        normalPictureButton.setFocusable(false);
        normalPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        normalPictureButton.setName("normalPictureButton"); // NOI18N
        normalPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        normalPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalPictureButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(normalPictureButton);

        handlePictureScrollPane.setName("handlePictureScrollPane"); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(handlePictureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
            .addComponent(jToolBar6, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jToolBar6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(handlePictureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
        );

        jSplitPane5.setLeftComponent(jPanel8);

        jPanel6.setName("jPanel6"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        addPictureButton.setText("添加素材");
        addPictureButton.setToolTipText("添加素材");
        addPictureButton.setFocusable(false);
        addPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addPictureButton.setName("addPictureButton"); // NOI18N
        addPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPictureButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addPictureButton);

        removePictureButton.setText("删除素材");
        removePictureButton.setToolTipText("删除素材");
        removePictureButton.setFocusable(false);
        removePictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removePictureButton.setName("removePictureButton"); // NOI18N
        removePictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removePictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePictureButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removePictureButton);

        savePictureButton.setText("保存素材");
        savePictureButton.setToolTipText("保存素材");
        savePictureButton.setFocusable(false);
        savePictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        savePictureButton.setName("savePictureButton"); // NOI18N
        savePictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        savePictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePictureButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(savePictureButton);

        jScrollPane6.setName("jScrollPane6"); // NOI18N
        picturePane = new com.soyostar.editor.sprite.ui.widget.ChoosePicturePane(this);
        jScrollPane6.setViewportView(picturePane);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
        );

        jSplitPane5.setRightComponent(jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
        );

        spriteTabbedPane.addTab("素材编辑窗口", jPanel7);

        jPanel1.setName("jPanel1"); // NOI18N

        jSplitPane4.setResizeWeight(0.2);
        jSplitPane4.setName("jSplitPane4"); // NOI18N
        jSplitPane4.setOneTouchExpandable(true);

        jSplitPane6.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane6.setResizeWeight(0.5);
        jSplitPane6.setName("jSplitPane6"); // NOI18N
        jSplitPane6.setOneTouchExpandable(true);

        jPanel4.setName("jPanel4"); // NOI18N

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setName("jToolBar2"); // NOI18N

        newAniButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/1.PNG"))); // NOI18N
        newAniButton.setFocusable(false);
        newAniButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newAniButton.setName("newAniButton"); // NOI18N
        newAniButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newAniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAniButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(newAniButton);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/2.PNG"))); // NOI18N
        loadButton.setFocusable(false);
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setName("loadButton"); // NOI18N
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(loadButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/3.PNG"))); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setName("saveButton"); // NOI18N
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(saveButton);

        removeAniButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/11.PNG"))); // NOI18N
        removeAniButton.setFocusable(false);
        removeAniButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeAniButton.setName("removeAniButton"); // NOI18N
        removeAniButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeAniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAniButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(removeAniButton);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        atm = new AnimationTableModel();
        aniTable.setModel(atm);
        aniTable.setName("aniTable"); // NOI18N
        aniTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        aniTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aniTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(aniTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
        );

        jSplitPane6.setTopComponent(jPanel4);

        jPanel3.setName("jPanel3"); // NOI18N

        jToolBar4.setFloatable(false);
        jToolBar4.setRollover(true);
        jToolBar4.setName("jToolBar4"); // NOI18N

        addFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/1.PNG"))); // NOI18N
        addFrameButton.setFocusable(false);
        addFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFrameButton.setName("addFrameButton"); // NOI18N
        addFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFrameButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(addFrameButton);

        removeFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/11.PNG"))); // NOI18N
        removeFrameButton.setFocusable(false);
        removeFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeFrameButton.setName("removeFrameButton"); // NOI18N
        removeFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFrameButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(removeFrameButton);

        copyFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/7.PNG"))); // NOI18N
        copyFrameButton.setFocusable(false);
        copyFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyFrameButton.setName("copyFrameButton"); // NOI18N
        copyFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyFrameButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(copyFrameButton);

        upFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/gnome-up.png"))); // NOI18N
        upFrameButton.setFocusable(false);
        upFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upFrameButton.setName("upFrameButton"); // NOI18N
        upFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        upFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upFrameButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(upFrameButton);

        downFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/gnome-down.png"))); // NOI18N
        downFrameButton.setFocusable(false);
        downFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downFrameButton.setName("downFrameButton"); // NOI18N
        downFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downFrameButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(downFrameButton);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        ftm = new FrameTableModel();
        frameTable.setModel(ftm);
        frameTable.setName("frameTable"); // NOI18N
        frameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        frameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frameTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(frameTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
        );

        jSplitPane6.setRightComponent(jPanel3);

        jSplitPane4.setLeftComponent(jSplitPane6);

        jSplitPane7.setName("jSplitPane7"); // NOI18N
        jSplitPane7.setOneTouchExpandable(true);

        jPanel9.setName("jPanel9"); // NOI18N

        handleFrameScrollPane.setName("handleFrameScrollPane"); // NOI18N

        handleFramePane.setName("handleFramePane"); // NOI18N

        javax.swing.GroupLayout handleFramePaneLayout = new javax.swing.GroupLayout(handleFramePane);
        handleFramePane.setLayout(handleFramePaneLayout);
        handleFramePaneLayout.setHorizontalGroup(
            handleFramePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );
        handleFramePaneLayout.setVerticalGroup(
            handleFramePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 512, Short.MAX_VALUE)
        );

        handleFrameScrollPane.setViewportView(handleFramePane);

        jToolBar3.setFloatable(false);
        jToolBar3.setOrientation(1);
        jToolBar3.setRollover(true);
        jToolBar3.setName("jToolBar3"); // NOI18N

        upButton.setText("上移");
        upButton.setToolTipText("图块上移一层");
        upButton.setFocusable(false);
        upButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upButton.setName("upButton"); // NOI18N
        upButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(upButton);

        downButton.setText("下移");
        downButton.setToolTipText("图块下移一层");
        downButton.setFocusable(false);
        downButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downButton.setName("downButton"); // NOI18N
        downButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(downButton);

        leftRoate90Button.setText("左90");
        leftRoate90Button.setToolTipText("图块左旋90度");
        leftRoate90Button.setFocusable(false);
        leftRoate90Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        leftRoate90Button.setName("leftRoate90Button"); // NOI18N
        leftRoate90Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        leftRoate90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRoate90ButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(leftRoate90Button);

        rightRoate90Button.setText("右90");
        rightRoate90Button.setToolTipText("图块右旋90度");
        rightRoate90Button.setFocusable(false);
        rightRoate90Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rightRoate90Button.setName("rightRoate90Button"); // NOI18N
        rightRoate90Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rightRoate90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRoate90ButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(rightRoate90Button);

        flipVerticalButton.setText("垂翻");
        flipVerticalButton.setToolTipText("图块垂直翻转");
        flipVerticalButton.setFocusable(false);
        flipVerticalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flipVerticalButton.setName("flipVerticalButton"); // NOI18N
        flipVerticalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flipVerticalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipVerticalButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(flipVerticalButton);

        flipHorizontalButton.setText("水翻");
        flipHorizontalButton.setToolTipText("图块水平翻转");
        flipHorizontalButton.setFocusable(false);
        flipHorizontalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flipHorizontalButton.setName("flipHorizontalButton"); // NOI18N
        flipHorizontalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flipHorizontalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipHorizontalButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(flipHorizontalButton);

        jToolBar5.setFloatable(false);
        jToolBar5.setOrientation(1);
        jToolBar5.setRollover(true);
        jToolBar5.setName("jToolBar5"); // NOI18N

        jButton13.setText("添区");
        jButton13.setToolTipText("添加额外区域");
        jButton13.setFocusable(false);
        jButton13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton13.setName("jButton13"); // NOI18N
        jButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jToolBar5.add(jButton13);

        playAnimationButton.setText("播放");
        playAnimationButton.setToolTipText("播放动画");
        playAnimationButton.setFocusable(false);
        playAnimationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playAnimationButton.setName("playAnimationButton"); // NOI18N
        playAnimationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAnimationButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(playAnimationButton);

        jButton14.setText("删区");
        jButton14.setToolTipText("删除额外区域");
        jButton14.setFocusable(false);
        jButton14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton14.setName("jButton14"); // NOI18N
        jButton14.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jToolBar5.add(jButton14);

        removeTileButton.setText("删块");
        removeTileButton.setToolTipText("删除选中图块");
        removeTileButton.setFocusable(false);
        removeTileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeTileButton.setName("removeTileButton"); // NOI18N
        removeTileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeTileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTileButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(removeTileButton);

        upAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/up.png"))); // NOI18N
        upAlignButton.setToolTipText("图块上边对齐中心线");
        upAlignButton.setFocusable(false);
        upAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upAlignButton.setName("upAlignButton"); // NOI18N
        upAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        upAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(upAlignButton);

        downAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/down.png"))); // NOI18N
        downAlignButton.setToolTipText("图块下边对齐中心线");
        downAlignButton.setFocusable(false);
        downAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downAlignButton.setName("downAlignButton"); // NOI18N
        downAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(downAlignButton);

        leftAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/left.png"))); // NOI18N
        leftAlignButton.setToolTipText("图块左边对齐中心线");
        leftAlignButton.setFocusable(false);
        leftAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        leftAlignButton.setName("leftAlignButton"); // NOI18N
        leftAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        leftAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(leftAlignButton);

        rightAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/right.png"))); // NOI18N
        rightAlignButton.setToolTipText("图块右边对齐中心线");
        rightAlignButton.setFocusable(false);
        rightAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rightAlignButton.setName("rightAlignButton"); // NOI18N
        rightAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rightAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(rightAlignButton);

        centerAlignButton.setText("中");
        centerAlignButton.setToolTipText("图块中心对齐中心线");
        centerAlignButton.setFocusable(false);
        centerAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        centerAlignButton.setName("centerAlignButton"); // NOI18N
        centerAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        centerAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(centerAlignButton);

        outsideBoxCheckBox.setText("外框");
        outsideBoxCheckBox.setFocusable(false);
        outsideBoxCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        outsideBoxCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        outsideBoxCheckBox.setName("outsideBoxCheckBox"); // NOI18N
        outsideBoxCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        outsideBoxCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outsideBoxCheckBoxStateChanged(evt);
            }
        });
        jToolBar5.add(outsideBoxCheckBox);

        loopCheckBox.setSelected(true);
        loopCheckBox.setText("循环");
        loopCheckBox.setFocusable(false);
        loopCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loopCheckBox.setName("loopCheckBox"); // NOI18N
        loopCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loopCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopCheckBoxActionPerformed(evt);
            }
        });
        jToolBar5.add(loopCheckBox);

        zoomInFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/15.PNG"))); // NOI18N
        zoomInFrameButton.setToolTipText("放大帧");
        zoomInFrameButton.setFocusable(false);
        zoomInFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInFrameButton.setName("zoomInFrameButton"); // NOI18N
        zoomInFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInFrameButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(zoomInFrameButton);

        zoomOutFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/14.PNG"))); // NOI18N
        zoomOutFrameButton.setToolTipText("缩小帧");
        zoomOutFrameButton.setFocusable(false);
        zoomOutFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutFrameButton.setName("zoomOutFrameButton"); // NOI18N
        zoomOutFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutFrameButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(zoomOutFrameButton);

        normalFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyostar/resources/10.PNG"))); // NOI18N
        normalFrameButton.setToolTipText("还原缩放");
        normalFrameButton.setFocusable(false);
        normalFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        normalFrameButton.setName("normalFrameButton"); // NOI18N
        normalFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        normalFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalFrameButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(normalFrameButton);

        jToolBar7.setFloatable(false);
        jToolBar7.setOrientation(1);
        jToolBar7.setRollover(true);
        jToolBar7.setName("jToolBar7"); // NOI18N

        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider1.setName("jSlider1"); // NOI18N
        jToolBar7.add(jSlider1);

        alphaSlider.setMaximum(255);
        alphaSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        alphaSlider.setValue(0);
        alphaSlider.setName("alphaSlider"); // NOI18N
        alphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSliderStateChanged(evt);
            }
        });
        jToolBar7.add(alphaSlider);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(handleFrameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToolBar7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jToolBar3, jToolBar5, jToolBar7});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(handleFrameScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
            .addComponent(jToolBar5, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
            .addComponent(jToolBar7, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
        );

        jSplitPane7.setLeftComponent(jPanel9);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        pictureTabbedPane.setName("pictureTabbedPane"); // NOI18N
        jScrollPane2.setViewportView(pictureTabbedPane);

        jSplitPane7.setRightComponent(jScrollPane2);

        jSplitPane4.setRightComponent(jSplitPane7);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
        );

        spriteTabbedPane.addTab("动画编辑窗口", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spriteTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1010, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spriteTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void zoomInPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInPictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        handlePicturePanes.get(picturePane.getSelectedPicture()).zoomIn();
}//GEN-LAST:event_zoomInPictureButtonActionPerformed

    private void zoomOutPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutPictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        handlePicturePanes.get(picturePane.getSelectedPicture()).zoomOut();
}//GEN-LAST:event_zoomOutPictureButtonActionPerformed

    private void normalPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalPictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        handlePicturePanes.get(picturePane.getSelectedPicture()).setZoomLevel(HandlePicturePane.ZOOM_NORMALSIZE);
}//GEN-LAST:event_normalPictureButtonActionPerformed

    private void addPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPictureButtonActionPerformed
        // TODO add your handling code here:
        Picture pic = new Picture();
        JFileChooser ch = new JFileChooser(AppData.getInstance().getCurProject().getPath() + File.separatorChar + "image" + File.separatorChar + "animation");
        JFileChooserImagePreview preview = new JFileChooserImagePreview(ch);
        ch.addPropertyChangeListener(preview);
        ch.setAccessory(preview);
        int ret = ch.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = ch.getSelectedFile();
            try {
                pic.setSourceImageFile(file.getName());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            pic.setGid(AppData.getInstance().getCurProject().getPictures().size());
            AppData.getInstance().getCurProject().addPicture(pic);
        }
}//GEN-LAST:event_addPictureButtonActionPerformed

    private void removePictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        AppData.getInstance().getCurProject().removePicture(picturePane.getSelectedIndex());

        //        picturePane.updateUI();
}//GEN-LAST:event_removePictureButtonActionPerformed

    private void newAniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAniButtonActionPerformed
        // TODO add your handling code here:
        Animation ani = new Animation();
        ani.setName("双击设置动画名称");
        AppData.getInstance().getCurProject().addAnimation(ani);
        Frame frame = new Frame();
        frame.setName("双击设置帧名称");
        ani.addFrame(frame);
        handleFramePane.setCurFrame(frame);
}//GEN-LAST:event_newAniButtonActionPerformed

    private void removeAniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAniButtonActionPerformed
        // TODO add your handling code here:

        if (aniTable.getSelectedRow() < 0 || aniTable.getSelectedRow() > AppData.getInstance().getCurProject().getAnimationCounts() - 1) {
            return;
        }
        int id = JOptionPane.showConfirmDialog(this, "你确定要删除该动画吗？", "删除动画", JOptionPane.OK_CANCEL_OPTION);
        if (id == JOptionPane.OK_OPTION) {
            AppData.getInstance().getCurProject().removeAnimation(Integer.parseInt(atm.getValueAt(aniTable.getSelectedRow(), 0).toString()));
            AppData.getInstance().setCurrentAnimationIndex(-1);
            atm.updateData();
            aniTable.getSelectionModel().clearSelection();
            aniTable.updateUI();
            handleFramePane.setCurFrame(null);
            frameTable.getSelectionModel().clearSelection();
            frameTable.updateUI();
        }
    }//GEN-LAST:event_removeAniButtonActionPerformed

    private void aniTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aniTableMouseClicked
        // TODO add your handling code here:
        AppData.getInstance().setCurrentAnimationIndex(Integer.parseInt(atm.getValueAt(aniTable.getSelectedRow(), 0).toString()));
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        handleFramePane.setCurFrame(ani.getFrame(0));
        if (ani.getFrames().size() > 0) {
            frameTable.getSelectionModel().setSelectionInterval(0, 0);
        } else {
            frameTable.getSelectionModel().clearSelection();
        }
        frameTable.updateUI();
}//GEN-LAST:event_aniTableMouseClicked

    private void playAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAnimationButtonActionPerformed
        // TODO add your handling code here:
        handleFramePane.playOrPause(loopCheckBox.isSelected());
        if (handleFramePane.isIsPlay()) {
            playAnimationButton.setText("暂停");
        } else {
            playAnimationButton.setText("播放");
        }
    }//GEN-LAST:event_playAnimationButtonActionPerformed

    private void loopCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopCheckBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_loopCheckBoxActionPerformed

    private void zoomInFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInFrameButtonActionPerformed
        // TODO add your handling code here:
        if (handleFramePane.getCurFrame() != null) {
            handleFramePane.zoomIn();
        }
}//GEN-LAST:event_zoomInFrameButtonActionPerformed

    private void zoomOutFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutFrameButtonActionPerformed
        // TODO add your handling code here:
        if (handleFramePane.getCurFrame() != null) {
            handleFramePane.zoomOut();
        }
}//GEN-LAST:event_zoomOutFrameButtonActionPerformed

    private void normalFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalFrameButtonActionPerformed
        // TODO add your handling code here:
        if (handleFramePane.getCurFrame() != null) {
            handleFramePane.setZoomLevel(handleFramePane.ZOOM_NORMALSIZE);
        }
}//GEN-LAST:event_normalFrameButtonActionPerformed

    private void spriteTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spriteTabbedPaneStateChanged
        // TODO add your handling code here:
//        if (spriteTabbedPane.getSelectedIndex() == 0) {
//            bottomLabel.setText("按住Shift再拖动可改变切块大小");
//        } else {
//            bottomLabel.setText("拖动下方切好的图块到上方面板进行拼装");
//        }
    }//GEN-LAST:event_spriteTabbedPaneStateChanged

    private void addFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimationIndex() < 0 || data.getCurrentAnimationIndex() > data.getCurProject().getAnimationCounts() - 1) {
            return;
        }
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        Frame frame = new Frame();
        frame.setName("双击设置帧名称");
        frame.setAnimation(ani);

        ani.addFrame(frame);

        handleFramePane.setCurFrame(frame);
        frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
                ani.getFrames().size() - 1);
        frameTable.updateUI();
    }//GEN-LAST:event_addFrameButtonActionPerformed

    private void removeFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimationIndex() < 0 || data.getCurrentAnimationIndex() > data.getCurProject().getAnimationCounts() - 1) {
            return;
        }
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        if (frameTable.getSelectedRow() < 0 || frameTable.getSelectedRow() > ani.getFrames().size() - 1) {
            return;
        }
        ani.removeFrame(frameTable.getSelectedRow());
        handleFramePane.setCurFrame(ani.getFrame(0));
        if (ani.getFrames().size() > 0) {
            frameTable.getSelectionModel().setSelectionInterval(0, 0);
        } else {
            frameTable.getSelectionModel().clearSelection();
        }
        frameTable.updateUI();
    }//GEN-LAST:event_removeFrameButtonActionPerformed

    private void upFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimationIndex() < 0 || data.getCurrentAnimationIndex() > data.getCurProject().getAnimationCounts() - 1) {
            return;
        }
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        int frameIndex = ani.getFrames().indexOf(handleFramePane.getCurFrame());
        if (frameIndex > 0) {
            ani.swapFrameUp(frameIndex);
            frameTable.getSelectionModel().setSelectionInterval(frameIndex - 1,
                    frameIndex - 1);
            handleFramePane.setCurFrame(ani.getFrame(frameTable.getSelectedRow()));
            frameTable.updateUI();
        }
    }//GEN-LAST:event_upFrameButtonActionPerformed

    private void downFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimationIndex() < 0 || data.getCurrentAnimationIndex() > data.getCurProject().getAnimationCounts() - 1) {
            return;
        }
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        int frameIndex = ani.getFrames().indexOf(handleFramePane.getCurFrame());
        int totalFrames = ani.getFrames().size();
        if (frameIndex < totalFrames - 1) {
            ani.swapFrameDown(frameIndex);
            frameTable.getSelectionModel().setSelectionInterval(frameIndex + 1,
                    frameIndex + 1);
            handleFramePane.setCurFrame(ani.getFrame(frameTable.getSelectedRow()));
            frameTable.updateUI();
        }
    }//GEN-LAST:event_downFrameButtonActionPerformed

    private void frameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameTableMouseClicked
        // TODO add your handling code here:
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        if (frameTable.getSelectedRow() < 0 || frameTable.getSelectedRow() > ani.getFrames().size() - 1) {
            return;
        }
        handleFramePane.setCurFrame(ani.getFrame(frameTable.getSelectedRow()));
    }//GEN-LAST:event_frameTableMouseClicked

    private void removeTileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTileButtonActionPerformed
        // TODO add your handling code here:
        handleFramePane.removeSelectedTile();
    }//GEN-LAST:event_removeTileButtonActionPerformed

    private void leftAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().x = HandleFramePane.FRAME_PANEL_W / 2;
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_leftAlignButtonActionPerformed

    private void rightAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().x = HandleFramePane.FRAME_PANEL_W / 2 - clip.getW();
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_rightAlignButtonActionPerformed

    private void upAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().y = HandleFramePane.FRAME_PANEL_H / 2;
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_upAlignButtonActionPerformed

    private void downAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().y = HandleFramePane.FRAME_PANEL_H / 2 - clip.getH();
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_downAlignButtonActionPerformed

    private void centerAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().x = HandleFramePane.FRAME_PANEL_W / 2 - clip.getW() / 2;
            clip.getFramePoint().y = HandleFramePane.FRAME_PANEL_H / 2 - clip.getH() / 2;
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_centerAlignButtonActionPerformed

    private void leftRoate90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRoate90ButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() - 90 >= 0) {
                clip.setRotation(clip.getRotation() - 90);
            } else {
                clip.setRotation(clip.getRotation() - 90 + 360);
            }
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_leftRoate90ButtonActionPerformed

    private void rightRoate90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRoate90ButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() + 90 < 360) {
                clip.setRotation(clip.getRotation() + 90);
            } else {
                clip.setRotation(clip.getRotation() + 90 - 360);
            }
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_rightRoate90ButtonActionPerformed

    private void flipHorizontalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipHorizontalButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() == 90 || clip.getRotation() == 270) {
                if (clip.getRotation() + 180 < 360) {
                    clip.setRotation(clip.getRotation() + 180);
                } else {
                    clip.setRotation(clip.getRotation() + 180 - 360);
                }
            }
            clip.setMirror(!clip.isMirror());
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_flipHorizontalButtonActionPerformed

    private void flipVerticalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipVerticalButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() == 0 || clip.getRotation() == 180) {
                if (clip.getRotation() + 180 < 360) {
                    clip.setRotation(clip.getRotation() + 180);
                } else {
                    clip.setRotation(clip.getRotation() + 180 - 360);
                }
            }
            clip.setMirror(!clip.isMirror());
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_flipVerticalButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            Frame frame = handleFramePane.getCurFrame();
            int id = frame.getTiles().indexOf(clip);
            if (id < frame.getTiles().size() - 1) {
                frame.swapClipUp(id);
                handleFramePane.setSelectedTileIndex(id + 1);
//                handleFramePane.repaint();
            }
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            Frame frame = handleFramePane.getCurFrame();
            int id = frame.getTiles().indexOf(clip);
            if (id > 0) {
                frame.swapClipDown(id);
                handleFramePane.setSelectedTileIndex(id - 1);
//                handleFramePane.repaint();
            }
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void outsideBoxCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_outsideBoxCheckBoxStateChanged
        // TODO add your handling code here:
        if (outsideBoxCheckBox.isSelected()) {
            handleFramePane.setIsShowOutLine(true);
        } else {
            handleFramePane.setIsShowOutLine(false);
        }
        handleFramePane.repaint();
    }//GEN-LAST:event_outsideBoxCheckBoxStateChanged

    private void alphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSliderStateChanged
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.setTransparency(alphaSlider.getValue());
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_alphaSliderStateChanged

    private void copyFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimationIndex() < 0 || data.getCurrentAnimationIndex() > data.getCurProject().getAnimationCounts() - 1) {
            return;
        }
        Animation ani = data.getCurProject().getAnimation(data.getCurrentAnimationIndex());
        Frame frame = null;
        if (handleFramePane.getCurFrame() != null) {
            try {
                frame = (Frame) handleFramePane.getCurFrame().clone();
            } catch (CloneNotSupportedException ex) {
                ex.printStackTrace();
            }
            ani.addFrame(frame);
            handleFramePane.setCurFrame(frame);
            frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
                    ani.getFrames().size() - 1);
            frameTable.updateUI();
        }

    }//GEN-LAST:event_copyFrameButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void savePictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePictureButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savePictureButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFrameButton;
    private javax.swing.JButton addPictureButton;
    private javax.swing.JSlider alphaSlider;
    private javax.swing.JTable aniTable;
    private javax.swing.JButton centerAlignButton;
    private javax.swing.JButton copyFrameButton;
    private javax.swing.JButton downAlignButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton downFrameButton;
    private javax.swing.JButton flipHorizontalButton;
    private javax.swing.JButton flipVerticalButton;
    private javax.swing.JTable frameTable;
    private com.soyostar.editor.sprite.ui.widget.HandleFramePane handleFramePane;
    private javax.swing.JScrollPane handleFrameScrollPane;
    public javax.swing.JScrollPane handlePictureScrollPane;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JSplitPane jSplitPane7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JToolBar jToolBar7;
    private javax.swing.JButton leftAlignButton;
    private javax.swing.JButton leftRoate90Button;
    private javax.swing.JButton loadButton;
    private javax.swing.JCheckBox loopCheckBox;
    private javax.swing.JButton newAniButton;
    private javax.swing.JButton normalFrameButton;
    private javax.swing.JButton normalPictureButton;
    private javax.swing.JCheckBox outsideBoxCheckBox;
    private javax.swing.JTabbedPane pictureTabbedPane;
    private javax.swing.JButton playAnimationButton;
    private javax.swing.JButton removeAniButton;
    private javax.swing.JButton removeFrameButton;
    private javax.swing.JButton removePictureButton;
    private javax.swing.JButton removeTileButton;
    private javax.swing.JButton rightAlignButton;
    private javax.swing.JButton rightRoate90Button;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton savePictureButton;
    private javax.swing.JTabbedPane spriteTabbedPane;
    private javax.swing.JButton upAlignButton;
    private javax.swing.JButton upButton;
    private javax.swing.JButton upFrameButton;
    private javax.swing.JButton zoomInFrameButton;
    private javax.swing.JButton zoomInPictureButton;
    private javax.swing.JButton zoomOutFrameButton;
    private javax.swing.JButton zoomOutPictureButton;
    // End of variables declaration//GEN-END:variables

    public void projectChanged(ProjectChangedEvent e) {
    }

    public void animationAdded(ProjectChangedEvent e, Animation ani) {
        AppData.getInstance().setCurrentAnimationIndex(AppData.getInstance().getCurProject().getAnimationCounts() - 1);
        atm.updateData();
        aniTable.getSelectionModel().setSelectionInterval(AppData.getInstance().getCurProject().getAnimationCounts() - 1,
                AppData.getInstance().getCurProject().getAnimationCounts() - 1);
        aniTable.updateUI();
        frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
                ani.getFrames().size() - 1);
        frameTable.updateUI();
        if (ani.getFrames().size() > 0) {
            handleFramePane.setCurFrame(ani.getFrame(ani.getFrames().size() - 1));
        }
    }

    public void pictureAdded(ProjectChangedEvent e, Picture pic) {
        ShowPicturePane spp = new ShowPicturePane(pic);
        JScrollPane paletteScrollPane = new JScrollPane(spp,
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        pictureTabbedPane.add(pic.getSourceImageFile(), paletteScrollPane);
        showPictureScrollPanes.put(pic, paletteScrollPane);
        HandlePicturePane hpp = new HandlePicturePane(pic);
        DragSource dragSource = DragSource.getDefaultDragSource();
        dragSource.createDefaultDragGestureRecognizer(spp,
                DnDConstants.ACTION_COPY_OR_MOVE, spp);
        DropTarget dropTarget = new DropTarget(handleFramePane, DnDConstants.ACTION_COPY, handleFramePane);
        handlePicturePanes.put(pic, hpp);
        picturePane.setSelectedIndex(AppData.getInstance().getCurProject().getPictures().size() - 1);
        handlePictureScrollPane.setViewportView(hpp);
    }

    public void animationRemoved(ProjectChangedEvent e, int index) {
    }

    public void pictureRemoved(ProjectChangedEvent e, int index) {
        pictureTabbedPane.remove(showPictureScrollPanes.get(picturePane.getSelectedPicture()));
        handlePicturePanes.remove(picturePane.getSelectedPicture());
        showPictureScrollPanes.remove(picturePane.getSelectedPicture());
        picturePane.setSelectedIndex(-1);
        handlePictureScrollPane.setViewportView(null);
    }
}
